server:
  port: 8080

keycloak:
  server-url:
  realm:
  client-id:
  client-secret:
  admin-username:
  admin-password:
    
spring:
  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: AuthDto:com.ltineraryplanning.authservice.kafka.AuthDto,RedisTokenDto:com.ltineraryplanning.authservice.kafka.RedisTokenDto

  datasource:
    url: jdbc:postgresql://localhost:5435/users
    username: ltineraryplanning
    password: 1234
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect

kafkaTopic:
  topic: authTopic
  redisTopic: authRedisToken

# Ratelimiting
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health

  endpoint:
    health:
      show-details: ALWAYS

twilio:
  account:
    sid:
  auth:
    token:
  phone:
    number:
#
resilience4j:
  circuitbreaker:
    instances:
      authservice:
        register-health-indicator: true
        event-consumer-buffer-size: 10
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 7s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        sliding-window-type: COUNT_BASED

  ratelimiter:
    instances:
      verifyRateLimiter:
        limit-refresh-period: 5s
        limit-for-period: 10
        timeout-duration: 1s
