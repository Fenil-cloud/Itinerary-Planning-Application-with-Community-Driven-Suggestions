spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9098/realms/Itinerary-planning
  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: auth-service
              uri: lb:http://AUTH-SERVICE
              predicates:
                - Path=/api/v1/auth/**
            - id: community-suggestions-service
              uri: lb:http://COMMUNITY-SUGGESTIONS-SERVICE
              predicates:
                - Path=/api/v1/suggestion/**
            - id: voting-and-poll-service
              uri: lb:http://VOTING-AND-POLL-SERVICE
              predicates:
                - Path=/api/v1/polls/**, /api/v1/votes/**
            - id: trip-service
              uri: lb:http://TRIP-SERVICE
              predicates:
                - Path=/api/v1/trip/**
#            - id: notification-service
#              uri: lb:http://NOTIFICATION-SERVICE
#              predicates:
#                - Path=/api/v1/notification/**

        discovery:
          locator:
            enabled: true
  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: redisGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
        spring.json.type.mapping: RedisTokenDto:com.ltineraryplanning.gatewayservice.Redis.RedisTokenDto
  #    Redis
  data:
    redis:
      host: localhost
      port: 6380
  cache:
    type: redis

server:
  port: 8222

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: DEBUG
    org.springframework.security.oauth2: DEBUG
    reactor.netty.http.server: DEBUG

kafkaTopic:
  topic: authRedisToken

keycloak:
  server-url: ${KEYCLOAK_SERVER_URL}
  realm: ${KEYCLOAK_REALM}
  client-id: ${KEYCLOAK_CLIENT_ID}
  client-secret: ${KEYCLOAK_CLIENT_SECRET}
  admin-username: ${KEYCLOAK_ADMIN_USERNAME}
  admin-password: ${KEYCLOAK_ADMIN_PASSWORD}


management:
  health:
    circuitbreakers:
      enabled: true          # Enables circuit breaker health indicators
  endpoints:
    web:
      exposure:
        include: health      # Exposes only the /actuator/health endpoint over HTTP
  endpoint:
    health:
      show-details: ALWAYS

