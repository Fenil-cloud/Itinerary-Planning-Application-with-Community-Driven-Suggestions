services:
  postgres:
    container_name: ms_pg_sql1
    image: postgres
    environment:
      - POSTGRES_USER=ltineraryplanning
      - POSTGRES_PASSWORD=1234
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
      # - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - 5435:5432
    networks:
      - microservices-net
    restart: unless-stopped

  pgadmin:
    container_name: ms_pgadmin1
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - 5050:80
    networks:
      - microservices-net
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    container_name: zookeeper1
    environment:
       - ZOOKEEPER_SERVER_ID=1
       - ZOOKEEPER_CLIENT_PORT=2181
       - ZOOKEEPER_TICK_TIME=2000
    ports:
      - 22181:2181
    networks:
      - microservices-net
  kafka:
    image: confluentinc/cp-kafka:7.4.3
    container_name: ms_kafka1
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    networks:
      - microservices-net

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:2.23
    ports:
      - "9411:9411"
    networks:
      - microservices-net

  keyclock:
    container_name: keyclock-ms1
    image: quay.io/keycloak/keycloak:24.0.3
    ports:
      - 9098:8080
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_PORT: 5435
      KC_DB_USERNAME: ltineraryplanning
      KC_DB_PASSWORD: 1234
      KC_DB_DATABASE: keycloak

      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_PORT: 8080

    networks:
      - microservices-net
    command:
      - "start-dev"
  mail-dev:
    container_name: ms-mail-dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: ms_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - microservices-net
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: ms_kibana
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - microservices-net
    restart: unless-stopped

  mongodb:
    container_name: ms_mongo_db1
    image: mongo
    ports:
      - 27018:27017
    volumes:
      - mongo:/data
      # - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=fenil
      - MONGO_INITDB_ROOT_PASSWORD=1234
#      - MONGO_INITDB_DATABASE=customer
    networks:
      - microservices-net

  mongo-express:
    container_name: ms_mongo_express1
    image: mongo-express
    restart: always
    ports:
       - 8081:8081
    environment:
       - ME_CONFIG_MONGODB_ADMINUSERNAME=fenil
       - ME_CONFIG_MONGODB_ADMINPASSWORD=1234
       - ME_CONFIG_MONGODB_SERVER=mongodb
    networks:
       - microservices-net

  redis:
    container_name: ms_redis1
    image: redis:latest
    ports:
      - 6380:6379
    volumes:
      - redis-data:/data
    networks:
      - microservices-net
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant_storage:/qdrant/storage

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  redis-data:
  mongo:
  elasticsearch-data:
  qdrant_data:

  # redis-data-secondary:

  # uptime-kuma-data:
